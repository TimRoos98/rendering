# Source: elasticsearch/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: "elasticsearch-master-pdb"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: "elasticsearch-master"
---
# Source: elasticsearch/templates/secret-cert.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: elasticsearch-master-certs
  labels:
    app: elasticsearch-master
    chart: "elasticsearch"
    heritage: Helm
    release: elasticsearch
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURaekNDQWsrZ0F3SUJBZ0lSQU40M08rR1dVZW5xbFpKczRwRG92Rzh3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRBZUZ3MHlOREF6TURFeE1URTVNRFZhRncweQpOVEF6TURFeE1URTVNRFZhTUI4eEhUQWJCZ05WQkFNVEZHVnNZWE4wYVdOelpXRnlZMmd0YldGemRHVnlNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE3OHA2R2xFWEh2WDZuVXh5N2FxaFFNRG0KUEZPeEsyUVd6YjdlamkwYmZlSEVzK3dHeHdOZkJwc3Y4TEd3SnpBOXlrazRSVVJRcTFEcnRxOTlhRmIyRi9Oegpja29Ld3ZyWWQ0V0dDbCtvbUdUZkVtL0E1N0dHYzhUZVU3Wm5XcUxkYkxNUldGUmxJRGNJUzBMWEtDMmd6UXR2ClhxWmlNYU9DOGJUOVB5cENxMFBlQzY0R2xGM2JOSlB5V2V0N3Brb3pUTEFNTzMva0tBOFZMdzhFMDYzcGc5cXcKZVhRYkdhWXBZRXlNVXlHWHVuNWd1aDdxRzJ1WkFOTEZpcWJFWkFib2FtaGpxdy9Qd2NjaHN4ZksvSFBGcFNXTgppa1d1TExUWDJPajlqY0w1enR4S2Q4blpuMXlhL0NVZkJCOXJVTDZwZFhpdStCRzBGZDB6QXB0ZWpYMjdMUUlECkFRQUJvNEdoTUlHZU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQmZCZ05WSFJFRVdEQldnaFJsYkdGemRHbGpjMlZoY21ObwpMVzFoYzNSbGNvSWNaV3hoYzNScFkzTmxZWEpqYUMxdFlYTjBaWEl1WkdWbVlYVnNkSUlnWld4aGMzUnBZM05sCllYSmphQzF0WVhOMFpYSXVaR1ZtWVhWc2RDNXpkbU13RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJ1UmozS2EKdUdBcXlTZHFKUUhXL0p4QTArNHBJbDl2aml3ZXpHa1YzZEZIUkk1RC9wVmJXV0xqbDV6NDR0WEZLZUM4NWlsaQpvcEhPYnRmNEF5Nk1PWGh5UVVvejFNZXhDSytnbklGbUI2RU1Td2grbnN4MU94cGJzQzFXRjV4Q1o3NDVIczkzCjE4U0hyZlNUMHZCUlpaSDdxRzQyT2RRRk9nUmxGTEZ6RzU2Sk80WTJQU2pJVGEwSHJDbGQ5amxkaTdHL1ZzSkUKOGI1NWNEbllGSitlVnBwczB5TlB2NXUrL3lmNmVRMjZJM0lpZnJjWUJqeFd4c2k4U1pXU3NDMGdLNEIvTDRDcgovQ05Gcjd5VkNYYmI3aTRVQ0ZrM0RNY0dKb1FmR1dicGJCRkpCdG9jSmxiK2NkcFJObTVVckdCQTVEZ21rT1N1CktHNElsMDVSWmF2Si9hRT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNzhwNkdsRVhIdlg2blV4eTdhcWhRTURtUEZPeEsyUVd6YjdlamkwYmZlSEVzK3dHCnh3TmZCcHN2OExHd0p6QTl5a2s0UlVSUXExRHJ0cTk5YUZiMkYvTnpja29Ld3ZyWWQ0V0dDbCtvbUdUZkVtL0EKNTdHR2M4VGVVN1puV3FMZGJMTVJXRlJsSURjSVMwTFhLQzJnelF0dlhxWmlNYU9DOGJUOVB5cENxMFBlQzY0RwpsRjNiTkpQeVdldDdwa296VExBTU8zL2tLQThWTHc4RTA2M3BnOXF3ZVhRYkdhWXBZRXlNVXlHWHVuNWd1aDdxCkcydVpBTkxGaXFiRVpBYm9hbWhqcXcvUHdjY2hzeGZLL0hQRnBTV05pa1d1TExUWDJPajlqY0w1enR4S2Q4bloKbjF5YS9DVWZCQjlyVUw2cGRYaXUrQkcwRmQwekFwdGVqWDI3TFFJREFRQUJBb0lCQVFDUlJZR2ozK3k1L1J2UApvRGtnYzNjdDI2K2diTE94TGZvQ3U5ZnBHcnJGRUxveXBwT1VqaDVMeWtqSThWMWU0SU1Pd2owcythNUZtOGl4CjdLOTFQdm5vbUwwZ1NHc3NwUHZ2clJ6L3UrUlFMd3hXQnc0L1QvVzh2VkJVTnZWMm02UzU3ZUpjT1FUcTkydzIKN0UrZEw4ZHpjYklQRFkzL3RLZm45MVpWcGl5dHhFdklEYkQrSHUvaG5qSWtzU0tUM3Z4eTFxeFpWSldmOWxHRgoyTnJQTGxQRW11ekJySngydHkwOTRkQ3VROTBRYmxFL2ZwTUxmRk9OaU5jSzdTZDlxNVpjSFVuOWxUZnp6eVRSClZydExoWWpUOXpHS0NqdVNIYmxGVlI2UzA5SWFvNnErRkZzRDJ4MlFkYWlZZTVuaDZjSWFtQ01kWnBUMnAyVzEKS3hLQ2Fjd0JBb0dCQVBOU2NuR05hRGFJZTM2V3NRaWx0WlMvZXcxNUlrZXZOLzloKzBMWmVVTTI1c09yNHV1dQpNSnl5dVBhbjI2Zk9ST0FsSllVUjB5T09qc2NGaEdtc051WFFBTUtNQ3hnbWdkTFpqeHVQajc5UTJETVhPM2UzCm9qRW1FSE1OQmszaHR2RUhIT05TNW9aaDVLUWJrdEQ5TURyeElPR0dtTks1bFZWVTJFQVhtWlZoQW9HQkFQeEkKN2d4UG8zeUp3U2JWN213cFJMZWJ5TlZrQkVkSUJMbXpiUDFtTmQ1WjIwL1BhazM4ZThQdzVZNm5SYWhuSHp5QwpHTEE2OXBvQmVzdktmQW9UM2JSMWN1THJ3RlgwcXV1QUVZQnJmaDl3bnRFaGhEZ0hQejljV28ybVV4cUhCMHRMCnBWSXFFWHlyM3ozbU0zUlRvdFVJaUUzWWtyVWZCbTZsUHdVem9lMU5Bb0dBY05WLzJxWi9lQ0pzV2pTWkhmQnkKTnV0Z3JjdkptTUpwVGxWcWhnS0JXQ2tDZENTbVV6Snd1b21xZWo4Mi9pY0tDNE5PVmRvQk5sRHFadUpwRi9QVApkVml5c1lUdHRDSlBPNjdGelRzU3B0NWZrN21uU3dudC9hcXdJQm9mSFVpWlpFWXZJRCtXUlNUcU9Tdk1ObnZpCnZNS0t3K3A5dmVKdm5LVitycUlEQjZFQ2dZRUErczkrYVpyYkM3cmYzYjRkZEVacTNLYnh1TVBnUlFWaVBVUVYKL0s0YXE5MWxYU2oxcEdaNG5Nbm5UalVaMlZ2Ny8rbk9wWlZaQ0s2ajUrcDcrb0RaanNpYzJPQkxyS2k3SzdsOApyTkV3NkF6TXQxaTgyLzdJY0ROZWl5aHB3aHV2c3JtWHQrRysxTlVCOGNYa0xhZmdZQzVGWkM4Rld5OW04NlV3Cnkva1M2SmtDZ1lBV3RKQW9vN3JGZ05wa0hwQUw0SVQ4YnJMOUNhWlpCVGhKZDBmcXBUS0doaFNRczJUZGF6dGQKa0t6aDdMN2Nodk5IYTJSOUxCZWZISlNTSUFyQlYyR1cyTzBmZzNrdk16dnc0cGhPUFRmZHY1citMQnRENWVUcQpERlNNZVFISVJkOXRTOC9tcTdVOTVWMVFxYTUwNFlBT1dTaUtKY1UzWng0WUhySHJNdkkvMFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBekNDQWV1Z0F3SUJBZ0lSQUtHRnE1VXB1REh6ckFBdENSanl1VFV3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRBZUZ3MHlOREF6TURFeE1URTVNRFJhRncweQpOVEF6TURFeE1URTVNRFJhTUJzeEdUQVhCZ05WQkFNVEVHVnNZWE4wYVdOelpXRnlZMmd0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEazV6SDVSWENlNjFVV0wwZ1pUTmZraDVnbGQxWXUKN0EwQ1E5VnFPaXlIenNkdFlOM3c4bUJic3V4UVB3aXgwZ3N4N0puMVFYY1U3ajJiRHJnRFRtbVkzNnVBRlczZgpRVUNIV3hobHI1KzhSbUJWVDM2OExOeFcxV1kwSStCaTBQZnhZSGJjWVEwUE1JMGVFQzhheXRxSGgxek42dmRPCkQwNW5ZQmQxcG9PZXJYU3RLbmZncXpvQmkrNVhCanVjYUxweGwrV0ZoRXdmWE1GeGQyaklwZDJIT1VQcUJ5clcKdzV6b3RZTWFyaUJIRFFsbk9iUUtKaUE4aGdkcFcyV3hIeHVodXM5VjRWdFNNSnUxejBOQm5jL0FkVFNMc2RScQoycG90eWd2c2F5Z2xPMTlxS0psN2dORFE3WldTVVo3VkxlVXdyTkxMWXRiMy9CMG1UbmwvNWwzTkFnTUJBQUdqClFqQkFNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQXlVUWViMTEzQmxtWQp6c3R1bkJGbE5teXZCS0lVTmFkRGV4em9xbE82d2NrNlQ5V1lvRzdDRDdMRTVRRE11MzdQZnlQZzFZd21xNjhpCmFURnZiL0RoM3k1Y2lBYXp3MFFJOHNRRFdZV0Q1TjdCbFZaK25pT2hLTVhaTS9IN0JxZGJxOGNzN0xTaTZCdEMKK1FMMHdMVFpBUnZLUVpPWGJVMUU1bjhmQk5JU1lLbExtY0Y5OGtuelIzRGV1SDB5RzhES2N2bk9RckhNYnRPWgpNTjZ0ajkrTk9qVnJaRXZMZ3BYSmJmcXB3MGtlemhMbnpRWklQWDI3ZFQvVVg0QzdDR3p2RmhGTVRkU1V1REluCnh1M3RyZUc0M1ZGclVYYVBCakFWQm1WYXNCVGNWQmFiQXF0REc2RkR1bGRtVGlZT2tWVUZxREJ6WURoQmExVEYKS1JnTFovNnltQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
---
# Source: elasticsearch/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-master-credentials
  labels:
    heritage: "Helm"
    release: "elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
type: Opaque
data:
  username: ZWxhc3RpYw==
  password: "YmNsTEMxOGtKcXdWM3dXaA=="
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    release: "elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  publishNotReadyAddresses: false
  ports:
    - name: http
      protocol: TCP
      port: 9200
    - name: transport
      protocol: TCP
      port: 9300
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master-headless
  labels:
    heritage: "Helm"
    release: "elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: "elasticsearch-master"
  ports:
    - name: http
      port: 9200
    - name: transport
      port: 9300
---
# Source: elasticsearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    esMajorVersion: "8"
spec:
  serviceName: elasticsearch-master-headless
  selector:
    matchLabels:
      app: "elasticsearch-master"
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        name: elasticsearch-master
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 30Gi
  template:
    metadata:
      name: "elasticsearch-master"
      labels:
        release: "elasticsearch"
        chart: "elasticsearch"
        app: "elasticsearch-master"
      annotations:

    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - "elasticsearch-master"
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
        - name: elasticsearch-certs
          secret:
            secretName: elasticsearch-master-certs
      enableServiceLinks: true
      initContainers:
        - name: configure-sysctl
          securityContext:
            runAsUser: 0
            privileged: true
          image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
          imagePullPolicy: "IfNotPresent"
          command: ["sysctl", "-w", "vm.max_map_count=262144"]
          resources:
            {}

      containers:
        - name: "elasticsearch"
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
          image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
          imagePullPolicy: "IfNotPresent"
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  set -e
                  
                  # Exit if ELASTIC_PASSWORD in unset
                  if [ -z "${ELASTIC_PASSWORD}" ]; then
                    echo "ELASTIC_PASSWORD variable is missing, exiting"
                    exit 1
                  fi
                  
                  # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                  # Once it has started only check that the node itself is responding
                  START_FILE=/tmp/.es_start_file
                  
                  # Disable nss cache to avoid filling dentry cache when calling curl
                  # This is required with Elasticsearch Docker using nss < 3.52
                  export NSS_SDB_USE_CACHE=no
                  
                  http () {
                    local path="${1}"
                    local args="${2}"
                    set -- -XGET -s
                  
                    if [ "$args" != "" ]; then
                      set -- "$@" $args
                    fi
                  
                    set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"
                  
                    curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
                  }
                  
                  if [ -f "${START_FILE}" ]; then
                    echo 'Elasticsearch is already running, lets check the node is healthy'
                    HTTP_CODE=$(http "/" "-w %{http_code}")
                    RC=$?
                    if [[ ${RC} -ne 0 ]]; then
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                      exit ${RC}
                    fi
                    # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                    if [[ ${HTTP_CODE} == "200" ]]; then
                      exit 0
                    elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                      exit 0
                    else
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                      exit 1
                    fi
                  
                  else
                    echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                    if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                      touch ${START_FILE}
                      exit 0
                    else
                      echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                      exit 1
                    fi
                  fi
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 9200
            - name: transport
              containerPort: 9300
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 1000m
              memory: 2Gi
          env:
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: cluster.initial_master_nodes
              value: "elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,"
            - name: node.roles
              value: "master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,"
            - name: discovery.seed_hosts
              value: "elasticsearch-master-headless"
            - name: cluster.name
              value: "elasticsearch"
            - name: network.host
              value: "0.0.0.0"
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: elasticsearch-master-credentials
                  key: password
            - name: xpack.security.enabled
              value: "true"
            - name: xpack.security.transport.ssl.enabled
              value: "true"
            - name: xpack.security.http.ssl.enabled
              value: "true"
            - name: xpack.security.transport.ssl.verification_mode
              value: "certificate"
            - name: xpack.security.transport.ssl.key
              value: "/usr/share/elasticsearch/config/certs/tls.key"
            - name: xpack.security.transport.ssl.certificate
              value: "/usr/share/elasticsearch/config/certs/tls.crt"
            - name: xpack.security.transport.ssl.certificate_authorities
              value: "/usr/share/elasticsearch/config/certs/ca.crt"
            - name: xpack.security.http.ssl.key
              value: "/usr/share/elasticsearch/config/certs/tls.key"
            - name: xpack.security.http.ssl.certificate
              value: "/usr/share/elasticsearch/config/certs/tls.crt"
            - name: xpack.security.http.ssl.certificate_authorities
              value: "/usr/share/elasticsearch/config/certs/ca.crt"
          volumeMounts:
            - name: "elasticsearch-master"
              mountPath: /usr/share/elasticsearch/data
            - name: elasticsearch-certs
              mountPath: /usr/share/elasticsearch/config/certs
              readOnly: true
---
# Source: elasticsearch/templates/test/test-elasticsearch-health.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "elasticsearch-idfkd-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  containers:
    - name: "elasticsearch-gqozy-test"
      env:
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elasticsearch-master-credentials
              key: password
      image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
      imagePullPolicy: "IfNotPresent"
      command:
        - "sh"
        - "-c"
        - |
          #!/usr/bin/env bash -e
          curl -XGET --fail --cacert /usr/share/elasticsearch/config/certs/tls.crt -u "elastic:${ELASTIC_PASSWORD}" https://'elasticsearch-master:9200/_cluster/health?wait_for_status=green&timeout=1s'
      volumeMounts:
        - name: elasticsearch-certs
          mountPath: /usr/share/elasticsearch/config/certs
          readOnly: true
  restartPolicy: Never
  volumes:
    - name: elasticsearch-certs
      secret:
        secretName: elasticsearch-master-certs